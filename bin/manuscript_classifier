#!/usr/bin/env python3
import os
import pandas as pd
import pkgutil
from argparse import ArgumentParser
from damfret_classifier.config import Config
from damfret_classifier.analyze import classify_datasets
from damfret_classifier.utils import load_settings, create_genes_table, remove_genes_and_replicates_below_count
from damfret_classifier.utils import validate_gene_replicates, to_fwf


script_description = """This is a Python package for classifying DAmFRET data based on supervised learning. The data can also be analyzed to allow mechanistic inferences regarding nucleation of ordered assemblies."""


def main():
    parser = ArgumentParser('classify_damfret', description=script_description)
    parser.add_argument('plasmid_table', help='A CSV file comprised of genes, plasmid ids, wells, and sequences.')
    parser.add_argument('config_id', help='The identifier contained in the config file to load.')
    parser.add_argument('-c', '--config', help='The YAML config file to use.', type=str, default='config.yaml')
    args = parser.parse_args()
    
    plasmid_tsv_savename = args.plasmid_table.replace('.csv', '.tsv')

    print('Loading settings...')
    settings = load_settings(args.config)

    print('Loading config...')
    config = Config(args.config, args.config_id)

    print('Populating genes table...')
    genes_table = create_genes_table(config, args.plasmid_table, plasmid_tsv_savename)

    print('Analyzing genes table for low counts...')
    truncated_table_lc, _excluded_genes = remove_genes_and_replicates_below_count(genes_table, config.drop_cell_counts, 'construct')

    print('Analyzing genes table for genes with invalid number of replicates...')
    truncated_table = validate_gene_replicates(truncated_table_lc, config.num_replicates)
    
    if len(truncated_table['well_file']) < len(truncated_table_lc['well_file']):
        revised_plasmid_tsv_savename = plasmid_tsv_savename.replace('.tsv', '-revised.tsv')
        print('Writing revised genes table ("{}")...'.format(revised_plasmid_tsv_savename))
        columns_order = 'construct,replicate,gene,well_file,plasmid,counts,AA_sequence'.split(',')
        to_fwf(truncated_table[columns_order], revised_plasmid_tsv_savename)

    print('Classifying datasets (this will take some time)...')
    classify_datasets(settings, config, truncated_table)


if __name__ == '__main__':
    main()
